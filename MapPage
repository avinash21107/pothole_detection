import { useLocation, useNavigate } from "react-router-dom";
import { MapContainer, TileLayer, Polyline, CircleMarker, Popup } from "react-leaflet";
import "leaflet/dist/leaflet.css";

interface DataPoint {
  lat: number;
  lng: number;
  severity: string;
  sequence: number | null;
}

const MapPage = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const data = (location.state?.data || []) as DataPoint[];

  if (data.length === 0) {
    return (
      <div className="container">
        <h2>No data available. Please go back and upload a file.</h2>
        <button onClick={() => navigate("/")}>Go Back</button>
      </div>
    );
  }

  const getColor = (severity: string): string => {
    switch (severity) {
      case "high":
        return "#ff0000";
      case "medium":
        return "#ffa500";
      case "low":
        return "#ffff00";
      default:
        return "#0000ff";
    }
  };

  const routePath = data.map((point) => [point.lat, point.lng] as [number, number]);
  
  // Calculate the bounds of all points with proper typing
  const bounds = routePath.reduce<[[number, number], [number, number]]>(
    (acc, point) => {
      return [
        [Math.min(acc[0][0], point[0]), Math.min(acc[0][1], point[1])],
        [Math.max(acc[1][0], point[0]), Math.max(acc[1][1], point[1])]
      ];
    },
    [[90, 180], [-90, -180]]
  );

  return (
    <div className="map-container">
      <MapContainer 
        bounds={bounds}
        center={routePath[0] || [20.5937, 78.9629]} 
        zoom={13} 
        scrollWheelZoom={true}
        style={{ height: "100%", width: "100%" }}
      >
        <TileLayer
          attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        />
        {routePath.length > 1 && (
          <Polyline positions={routePath} color="blue" weight={4} />
        )}
        {data.map((point, index) => (
          <CircleMarker
            key={index}
            center={[point.lat, point.lng]}
            radius={8}
            fillColor={getColor(point.severity)}
            color="#000000"
            weight={1}
            fillOpacity={0.8}
          >
            <Popup>
              <b>Severity:</b> {point.severity}
              <br />
              <b>Latitude:</b> {point.lat}
              <br />
              <b>Longitude:</b> {point.lng}
            </Popup>
          </CircleMarker>
        ))}
      </MapContainer>
      <button className="back-button" onClick={() => navigate("/")}>
        Go Back
      </button>
    </div>
  );
};

export default MapPage;
